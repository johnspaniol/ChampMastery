sapply(CurrentSummonerName$lastPlayTime,as.POSIXct.date)
sapply(CurrentSummonerName$lastPlayTime,as.POSIXct)
sapply(CurrentSummonerName$lastPlayTime,as.POSIXct(,"%M:%S"))
as.POSIXct(CurrentSummonerName$lastPlayTime,origin = "1960-01-01", tz = "GMT")
as.POSIXct(CurrentSummonerName$lastPlayTime,origin = "1960-01-01", tz = "CST")
as.POSIXct(CurrentSummonerName$lastPlayTime,origin = "1960-01-01", tz = "CDT")
as.POSIXct(CurrentSummonerName$lastPlayTime,origin = "1960-01-01", tz = "MDT")
as.POSIXct(CurrentSummonerName$lastPlayTime,tz = "MDT")
as.POSIXct(CurrentSummonerName$lastPlayTime,origin = "1960-01-01")
as.POSIXct(CurrentSummonerName$lastPlayTime/1000,origin = "1960-01-01")
CurrentSummonerName$lastPlayTime <- sapply(X = CurrentSummonerName$lastPlayTime/1000, as.POSIXct(CurrentSummonerName$lastPlayTime/1000,origin = "1960-01-01"))
CurrentSummonerName$lastPlayTime <- sapply(X = CurrentSummonerName$lastPlayTime/1000, as.POSIXct(origin = "1970-01-01"))
CurrentSummonerName$lastPlayTime <- sapply(X = CurrentSummonerName$lastPlayTime/1000, as.POSIXct(x = CurrentSummonerName$lastPlayTime/1000,origin = "1960-01-01"))
function(x){as.POSIXct(x,origin = "1970-01-01")}
functionx <- function(x){as.POSIXct(x,origin = "1970-01-01")}
CurrentSummonerName$lastPlayTime <- sapply(X = CurrentSummonerName$lastPlayTime/1000,functionx)
View(CurrentSummonerName)
View(functionx)
function(x){as.POSIXct(x,origin = "1970-01-01")}
View(functionx)
rm(functionx)
as.POSIXct(CurrentSummonerName$lastPlayTime/1000,origin = "1970-01-01")
as.POSIXct(CurrentSummonerName$lastPlayTime/1000,origin = "1950-01-01")
View(CurrentSummonerName)
CurrentSummonerName$lastPlayTime
source('~/ChampMastery.R')
CurrentSummonerName$lastPlayTime
as.POSIXct(CurrentSummonerName$lastPlayTime/1000,origin = "1970-01-01")
Newfunction <- function(x)
{}
{}
rm Newfunction
rm(Newfunction)
Newfunction <- function(x)
{ y <- as.POSIXct(x/1000,origin = "1970-01-01")  return(y) }
source('~/funct1.R')
source('~/funct1.R')
CurrentSummonerName$lastPlayTime <- sapply(X = CurrentSummonerName$lastPlayTime/1000,Newfunction)
View(CurrentSummonerName)
CurrentSummonerName$lastPlayTime
source('~/ChampMastery.R')
CurrentSummonerName$lastPlayTime <- sapply(X = CurrentSummonerName$lastPlayTime,Newfunction)
View(CurrentSummonerName)
?sapply
?obs.time
??obs.time
??obs.times
?trunc
?format
CurrentSummonerName$lastPlayTime <- as.POSIXct(CurrentSummonerName$lastPlayTime/1000,origin = "1970-01-01"))
CurrentSummonerName$lastPlayTime <- as.POSIXct(x = CurrentSummonerName$lastPlayTime/1000,origin = "1970-01-01")
source('~/ChampMastery.R')
CurrentSummonerName$lastPlayTime <- as.POSIXct(x = CurrentSummonerName$lastPlayTime/1000,origin = "1970-01-01")
View(CurrentSummonerName)
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
View(CurrentSummonerName)
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
View(CurrentSummonerName)
source('~/ChampMastery.R')
install.packages("xlsx")
library(xlsx)
install.packages("rjava")
y
install.packages("rJava")
library(rJava)
library(xlsx)
?rjava
?rJava
??rJava
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/Nametest.R')
source('~/Nametest.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/MultiSummTest.R')
View(CurrentSummonerName)
CurrentSummoner
?rbind
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
{
source('~/Nametest.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
RiotURLCombine2
CurrentSummoner <- jsonlite::fromJSON(RiotURLCombine2)
source('~/MultiSummTest.R')
SummonerID <- GetSummID(Summonername)
RiotURLStart2 <- "https://na.api.pvp.net/championmastery/location/NA1/player/"
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
View(CurrentSummoner1)
RiotURLStart2 <- "https://na.api.pvp.net/api/lol/na/v1.4/summoner/"
RiotURLEnd2 <- "?api_key=e6774a60-1df0-43b6-9ff6-f0ff41378447"
RiotURLCombine2 <- paste(RiotURLStart2,SummID,RiotURLEnd2,sep = "")
SummInfo <- jsonlite::fromJSON(RiotURLCombine2)
RiotURLStart2 <- "https://na.api.pvp.net/api/lol/na/v1.4/summoner/"
RiotURLEnd2 <- "?api_key=e6774a60-1df0-43b6-9ff6-f0ff41378447"
RiotURLCombine2 <- paste(RiotURLStart2,29598189,RiotURLEnd2,sep = "")
SummInfo <- jsonlite::fromJSON(RiotURLCombine2)
SummInfo[[1]][2]
SummName <- SummInfo[[1]][2]
Summname2 <- SummName[[1]][1]
Summname2 <- SummInfo[[2]][3]
Summname2 <- SummInfo[[1]][3]
source('~/GetSummName.R')
RiotURLStart2 <- "https://na.api.pvp.net/championmastery/location/NA1/player/"
RiotURLEnd2 <- "/champions?api_key=e6774a60-1df0-43b6-9ff6-f0ff41378447"
RiotURLCombine2 <- paste(RiotURLStart2,29598189,RiotURLEnd2,sep = "")
CurrentSummoner <- jsonlite::fromJSON(RiotURLCombine2)
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
write.csv(CurrentSummoner1, file = '~/ChampMastery.csv')
source('~/MultiSummTest.R')
source('~/GetSummName.R')
source('~/MultiSummTest.R')
source('~/GetSummName.R')
source('~/MultiSummTest.R')
View(CurrentSummoner1)
View(GetChampName)
source('~/GetSummName.R')
View(GetChampName)
source('~/MultiSummTest.R')
RiotURLStart2 <- "https://na.api.pvp.net/api/lol/na/v1.4/summoner/"
RiotURLEnd2 <- "/name?api_key=e6774a60-1df0-43b6-9ff6-f0ff41378447"
RiotURLCombine2 <- paste(RiotURLStart2,30305782,RiotURLEnd2,sep = "")
RiotTestName <- jsonlite::fromJSON(RiotURLCombine2)
print(RiotTestName)
RiotURLStart2 <- "https://na.api.pvp.net/championmastery/location/NA1/player/"
RiotURLEnd2 <- "/champions?api_key=e6774a60-1df0-43b6-9ff6-f0ff41378447"
RiotURLCombine2 <- paste(RiotURLStart2,30305782,RiotURLEnd2,sep = "")
CurrentSummoner <- jsonlite::fromJSON(RiotURLCombine2)
CurrentSummoner
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
source('~/MultiSummTest.R')
write.csv(CurrentSummoner1, file = '~/ChampMastery.csv')
View(CurrentSummoner)
View(CurrentSummoner1)
source('~/ChampnameFunc.R')
source('~/MultiSummTest.R')
source('~/ChampMastery.R')
source('~/ChampnameFunc.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/ChampMastery.R')
source('~/MultiSummTest.R')
?proc.time
proc.time()
proc.time()
source('~/ChampMastery.R')
proc.time()
source('~/MultiSummTest.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='yordlesalvageandscraping',
token='F25DF1BAE7CE6D8FCF2A7C990B4F7CEC',
secret='GYIdD+gP05mABDz4URAdxmWkAWslPkJgYdjSH7p5')
library(rsconnect)
source('~/ChampMastery.R')
source('~/RR1.R')
?knitr::knit2html
knitr::knit2html("~/PA1_template.Rmd")
rmarkdown::render("~/PA1_template.Rmd")
rmarkdown::render("~/PA1_template.Rmd")
?rmarkdown::render
rmarkdown::render("~/PA1_template.Rmd","all")
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
DestFile1 <- "~/RData/StormData.csv.bz2"
download.file(url,DestFile1)
Activity <- read.csv(bzfile("~/RData/StormData.csv.bz2"))
View(Activity)
?bzfile
??bzfile
source('~/TestP1.R')
source('~/TestP1.R')
View(storm)
install.packages(gridextra)
install.packages("gridextra")
install.packages("gridExtra")
source('~/TestP1.R')
View(prop_dmg_events)
source('~/TestP1.R')
View(casualties)
install.packages("R.utils")
library(R.oo)
library(R.methodsS3)
libraries <- c("plyr",
"ggplot2",
"knitr",
"tools",
"readr",
"scales",
"lubridate",
"pander",
"reshape",
"ggrepel"
)
sapply(libraries, library, character.only = TRUE)
install.packages("readr")
sapply(libraries, library, character.only = TRUE)
install.packages("pander")
sapply(libraries, library, character.only = TRUE)
install.packages("reshape")
sapply(libraries, library, character.only = TRUE)
install.packages("ggrepel")
sapply(libraries, library, character.only = TRUE)
View(storm)
storm$EVTYPE <- sapply(storm$EVTYPE, adjust_events)
View(storm)
?grepl
View(storm)
?hist
install.packages("datasets")
install.packages("datasets")
update.packages()
y
install.packages("rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Caret")
install.packages("caret")
library("caret")
install.packages("shiny")
library(shiny)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
install.packages("e1071")
library(e1071)
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
View(testSmall)
library(MASS)
?shuttle
shuttle$use.binary <- as.integer(shuttle$use == "auto")
fit <- glm(use.binary ~ wind - 1, data = shuttle, family = binomial)
summary(fit)$coef
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
fit <- glm(use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
exp(coef(fit))
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
fit1 <- glm(use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
fit2 <- glm(1 - use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
coef(fit1)
coef(fit2)
library(MASS)
data(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
fit3 <- glm(1-auto ~ wind,  binomial, shuttle)
fit$coefficients
fit3$coefficients
data(InsectSprays)
fit <- glm(count ~ spray  - 1, family = "poisson", data = InsectSprays)
exp(fit$coef[1])/exp(fit$coef[2])
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit1
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lhs <- function(x) ifelse(x < 0,0-x,0) # basis function 1 (lhs = left hockey stick)
rhs <- function(x) ifelse(x > 0,x-0,0) # basis function 2 (rhs = right hockey stick)
gb <- lm(y ~ lhs(x) + rhs(x))
x <- seq(-5,5,by=1)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
lines(x, py)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
View(mtcars)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
View(mtcars)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
mod_init <- lm(mpg ~ ., data = mtcars)
mod_best <- step(mod_init, direction = "both")
summary(mod_best)
par(mfrow=c(2,2))
plot(mod_best, which=1)
plot(mod_best, which=2)
plot(mod_best, which=3)
plot(mod_best, which=5)
lev <- hatvalues(mod_best)
tail(sort(lev),3)
inf <- dfbetas(mod_best)
tail(sort(inf[,6]),3)
t.test(mpg ~ am, data = mtcars)
library(car)
scatterplot.matrix(~mpg+cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb, data=mtcars,
main="Plot 2: Scatterplot Matrix")
boxplot(mpg ~ am, data=mtcars, main="Plot 3: Miles per gallon by Transmission type",
xlab="Transmission type", ylab="Miles Per Gallon")
library(caret)
set.seed(12463)
training <- read.csv("pml-training.csv", stringsAsFactors=FALSE)
training$classe <- as.factor(training$classe)
training <- training[,-nearZeroVar(training)]
training <- training[,-c(1,2,3,4,5,6,7)]
library(caret)
set.seed(12463)
training <- read.csv("pml-training.csv", stringsAsFactors=FALSE)
training$classe <- as.factor(training$classe)
training <- training[,-nearZeroVar(training)]
training <- training[,-c(1,2,3,4,5,6,7)]
library(caret)
set.seed(12463)
training <- read.csv("pml-training.csv", stringsAsFactors=FALSE)
training$classe <- as.factor(training$classe)
training <- training[,-nearZeroVar(training)]
training <- training[,-c(1,2,3,4,5,6,7)]
library(caret)
training <- read.csv("pml-training.csv", stringsAsFactors=FALSE)
training$classe <- as.factor(training$classe)
training <- training[,-nearZeroVar(training)]
training <- training[,-c(1,2,3,4,5,6,7)]
?nearZeroVar
View(training)
?createDataPartition
?preProcess
?knnImpute
??knnImpute
library(Hmisc)
library(caret)
library(randomForest)
library(foreach)
library(doParallel)
install.packages("doParallel")
library(Hmisc)
library(caret)
library(randomForest)
library(foreach)
library(doParallel)
training_data <- read.csv("pml-training.csv", na.strings=c("#DIV/0!") )
evaluation_data <- read.csv("pml-testing.csv", na.strings=c("#DIV/0!") )
View(training)
for(i in c(8:ncol(training_data)-1)) {training_data[,i] = as.numeric(as.character(training_data[,i]))}
for(i in c(8:ncol(evaluation_data)-1)) {evaluation_data[,i] = as.numeric(as.character(evaluation_data[,i]))}
feature_set <- colnames(training_data[colSums(is.na(training_data)) == 0])[-(1:7)]
model_data <- training_data[feature_set]
feature_set
idx <- createDataPartition(y=model_data$classe, p=0.75, list=FALSE )
training <- model_data[idx,]
testing <- model_data[-idx,]
registerDoParallel()
x <- training[-ncol(training)]
y <- training$classe
rf <- foreach(ntree=rep(150, 6), .combine=randomForest::combine, .packages='randomForest') %dopar% {
randomForest(x, y, ntree=ntree)
}
install.packages("randomForest")
library(randomForest)
registerDoParallel()
x <- training[-ncol(training)]
y <- training$classe
rf <- foreach(ntree=rep(150, 6), .combine=randomForest::combine, .packages='randomForest') %dopar% {
randomForest(x, y, ntree=ntree)
}
predictions1 <- predict(rf, newdata=training)
confusionMatrix(predictions1,training$classe)
predictions2 <- predict(rf, newdata=testing)
confusionMatrix(predictions2,testing$classe)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
x <- evaluation_data
x <- x[feature_set[feature_set!='classe']]
answers <- predict(rf, newdata=x)
answers
pml_write_files(answers)
?paste0
?predict
library(rCharts)
library(devtools)
library(shiny)
setwd("~/ShinyApp/Champ_mastery")
library(rCharts)
library(devtools)
library(shiny)
require(devtools)
install_github(c('slidify', 'slidifyLibraries'), 'ramnathv', ref = 'dev')
require(devtools)
install_github('slidify', 'ramnathv')
install_github('rCharts', 'ramnathv')
install_github('shiny', 'rstudio')
install_github('slidifyLibraries', 'ramnathv')
library(c('slidify','slidifyLibraries','rCharts','shiny'))
library(shiny)
library(slidify)
library(slidifyLibraries)
library(rCharts)
runDeck()
runDeck()
runDeck()
source('~/ShinyApp/Champ_mastery/apps/app1.R')
runDeck()
install.packages("Rtools")
shiny::runApp('apps')
shiny::runApp('apps')
shiny::runApp('apps')
shiny::runApp('apps')
install.packages(UScensus2010)
install.packages("UScensus2010")
library(UScensus2010)
install.packages("maptools")
library(maptools)
library(UScensus2010)
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
setwd(~/)
setwd(~)
setwd(..)
?setwd
setwd(~/shinyApp)
setwd("~/shinyApp")
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
setwd("~/shinyApp/Champ_mastery")
shiny::runApp('~/ShinyApp/Champ_mastery/apps')
runDeck()
shiny::runApp('~/ShinyApp/Champ_mastery/apps')
